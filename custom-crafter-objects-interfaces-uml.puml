@startuml
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Result.MetadataType {
+  LORE
+  DISPLAYNAME
+  ENCHANTMENT
+  ITEMFLAG
+  UNBREAKABLE
+  CUSTOMMODELDATA
+  POTIONDATA
+  POTIONCOLOR
+  TEXTURE_ID
+  ATTRIBUTE_MODIFIER
+  TOOL_DURABILITY
+  BOOK_FIELD
+  LEATHER_ARMOR_COLOR
- String type
+ String toStr()
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.PotionData.PotionDuration {
+  JUMP
+  FIRE_RESISTANCE
+  SPEED
+  SLOW
+  WATER_BREATHING
+  HEAL
+  HARM
+  POISON
+  REGENERATION
+  INCREASE_DAMAGE
+  WEAKNESS
+  LUCK
+  TURTLE_MASTER
+  SLOW_FALLING
+  INVISIBILITY
+  NIGHT_VISION
+  LINGERING_NIGHT_VISION
+  LINGERING_INVISIBILITY
+  LINGERING_JUMP
+  LINGERING_FIRE_RESISTANCE
+  LINGERING_SPEED
+  LINGERING_SLOW
+  LINGERING_TURTLE_MASTER
+  LINGERING_WATER_BREATHING
+  LINGERING_HEAL
+  LINGERING_HARM
+  LINGERING_POISON
+  LINGERING_REGENERATION
+  LINGERING_INCREASE_DAMAGE
+  LINGERING_WEAKNESS
+  LINGERING_LUCK
+  LINGERING_SLOW_FALLING
- int upgraded
- int extended
- int normal
- String name
+ int getUpgraded()
+ int getExtended()
+ int getNormal()
+ String getPDName()
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.EnchantStrict {
+  INPUT
+  NOTSTRICT
+  ONLYENCHANT
+  STRICT
- String strict
+ String toStr()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.EnchantWrap {
- int level
- Enchantment enchant
- EnchantStrict strict
+ int getLevel()
+ void setLevel(int)
+ Enchantment getEnchant()
+ void setEnchant(Enchantment)
+ EnchantStrict getStrict()
+ void setStrict(EnchantStrict)
+ String info()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.ContainerWrapper {
- int order
- String tag
- NamespacedKey key
- PersistentDataType type
- String value
+ Class getValueType()
+ NamespacedKey getKey()
+ void setKey(NamespacedKey)
+ PersistentDataType getType()
+ void setType(PersistentDataType)
+ int getOrder()
+ void setOrder(int)
+ String getTag()
+ void setTag(String)
+ String getValue()
+ boolean hasKey()
+ boolean hasType()
+ void setValue(String)
+ String info()
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.PotionStrict {
+  INPUT
+  NOT_STRICT
+  ONLY_DURATION
+  ONLY_AMPLIFIER
+  ONLY_EFFECT
+  STRICT
- String type
+ String toStr()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Result.Result {
- {static} String NORMAL_ATTRIBUTE_MODIFIER_PATTERN
- {static} String EQUIPMENT_ATTRIBUTE_MODIFIER_PATTERN
- {static} String BOOK_FIELD_PATTERN
- {static} String LEATHER_ARMOR_COLOR_PATTERN
- String name
- Map<Enchantment,Integer> enchantsInfo
- int amount
- Map<MetadataType,List<String>> metadata
- String nameOrRegex
- int matchPoint
- List<ContainerWrapper> dataContainer
+ List<ContainerWrapper> getDataContainer()
+ void setDataContainer(List<ContainerWrapper>)
+ String getName()
+ void setName(String)
+ Map<Enchantment,Integer> getEnchantsInfo()
+ void setEnchantsInfo(Map<Enchantment,Integer>)
+ int getAmount()
+ void setAmount(int)
+ Map<MetadataType,List<String>> getMetadata()
+ void setMetadataValue(Map<MetadataType,List<String>>)
+ String getNameOrRegex()
+ void setNameOrRegex(String)
+ int getMatchPoint()
+ void setMatchPoint(int)
+ void setMetaData(ItemStack)
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Permission.RecipePermission {
+ {static} RecipePermission ROOT
- String parent
- String name
+ String getParent()
+ void setParent(String)
+ String getPermissionName()
+ void setPermissionName(String)
+ String toStr()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Coordinate {
- int x
- int y
+ int getX()
+ void setX(int)
+ int getY()
+ void setY(int)
+ boolean isSame(Coordinate)
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Container.RecipeDataContainerModifyType {
+  MODIFY
+  MAKE
- String modifyTypeString
+ String getModifyTypeString()
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.PotionBottleType {
+  NORMAL
+  LINGERING
+  SPLASH
- Material related
+ Material getRelated()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.DefinedCommand {
- String commandName
- boolean hasArgs
- List<String> args
- boolean console
- List<String> commandPermission
- Class<?> processClass
- Method processMethod
- int commandLen
+ String getCommandName()
+ void setCommandName(String)
+ boolean isHasArgs()
+ void setHasArgs(boolean)
+ List<String> getArgs()
+ void setArgs(List<String>)
+ boolean isConsole()
+ void setConsole(boolean)
+ List<String> getCommandPermission()
+ void setCommandPermission(List<String>)
+ Class<?> getProcessClass()
+ void setProcessClass(Class<?>)
+ Method getProcessMethod()
+ void setProcessMethod(Method)
+ int getCommandLen()
+ void setCommandLen(int)
+ String info()
}
interface com.github.sakakiaruka.customcrafter.customcrafter.interfaces.Matters {
~ String getName()
~ void setName(String)
~ List<Material> getCandidate()
~ void setCandidate(List<Material>)
~ void addCandidate(List<Material>)
~ List<EnchantWrap> getWrap()
~ void setWrap(List<EnchantWrap>)
~ boolean hasWrap()
~ void addWrap(EnchantWrap)
~ void addAllWrap(List<EnchantWrap>)
~ int getAmount()
~ void setAmount(int)
~ boolean isMass()
~ void setMass(boolean)
~ int getEnchantLevel(Enchantment)
~ String getAllWrapInfo()
~ boolean contains(Enchantment)
~ String info()
~ Map<Integer,ContainerWrapper> getContainerWrappers()
~ void setContainerWrappers(Map<Integer,ContainerWrapper>)
~ boolean hasContainer()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Container.RecipeDataContainer {
- PersistentDataType type
- String term
- String action
- boolean end
- RecipeDataContainerModifyType modifyType
+ PersistentDataType getDataType()
+ void setDataType(PersistentDataType)
+ String getTerm()
+ void setTerm(String)
+ String getAction()
+ void setAction(String)
+ boolean isEnd()
+ void setEnd(boolean)
+ RecipeDataContainerModifyType getModifyType()
+ void setModifyType(RecipeDataContainerModifyType)
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.Potions {
- Map<PotionEffect,PotionStrict> data
- PotionBottleType bottle
- boolean bottleTypeMatch
+ ItemStack prescribe()
+ String PotionInfo()
+ boolean hasAnyCustomEffect()
+ boolean hasPotionEffect(PotionEffectType)
+ Map<PotionEffect,PotionStrict> getData()
+ PotionBottleType getBottle()
+ boolean isBottleTypeMatch()
+ int getDuration(PotionEffectType)
+ int getAmplifier(PotionEffectType)
+ String getName()
+ void setName(String)
+ List<Material> getCandidate()
+ void setCandidate(List<Material>)
+ void addCandidate(List<Material>)
+ List<EnchantWrap> getWrap()
+ void setWrap(List<EnchantWrap>)
+ boolean hasWrap()
+ void addWrap(EnchantWrap)
+ void addAllWrap(List<EnchantWrap>)
+ int getAmount()
+ void setAmount(int)
+ boolean isMass()
+ void setMass(boolean)
+ int getEnchantLevel(Enchantment)
+ String getAllWrapInfo()
+ boolean contains(Enchantment)
+ String info()
+ Map<Integer,ContainerWrapper> getContainerWrappers()
+ void setContainerWrappers(Map<Integer,ContainerWrapper>)
+ Potions copy()
+ Potions oneCopy()
}
enum com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Tag {
+  NORMAL
+  AMORPHOUS
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe {
- String name
- Tag tag
- Map<Coordinate,Matter> coordinate
- Map<Material,ItemStack> returnItems
- RecipePermission permission
- Result result
- Map<NamespacedKey,List<RecipeDataContainer>> container
- Map<Matter,List<String>> usingContainerValuesMetadata
+ void addCoordinate(int,int,Matter)
+ Tag getTag()
+ void setTag(Tag)
+ String getName()
+ void setName(String)
+ Map<Coordinate,Matter> getCoordinate()
+ void setCoordinate(Map<Coordinate,Matter>)
+ Map<Material,ItemStack> getReturnItems()
+ void setReturnItems(Map<Material,ItemStack>)
+ Result getResult()
+ void setResult(Result)
+ RecipePermission getPermission()
+ void setPermission(RecipePermission)
+ boolean hasPermission()
+ List<Matter> getContentsNoAir()
+ List<Coordinate> getCoordinateList()
+ List<Matter> getContentsNoDuplicate()
+ Map<Matter,Integer> getContentsNoDuplicateRelateAmount()
+ Set<Material> getMassMaterialSet()
+ Matter getMatterFromCoordinate(Coordinate)
+ int getContainerHasAmount()
+ Map<NamespacedKey,List<RecipeDataContainer>> getContainer()
+ void setContainer(Map<NamespacedKey,List<RecipeDataContainer>>)
+ boolean hasContainer()
+ Map<Matter,List<String>> getUsingContainerValuesMetadata()
+ void setUsingContainerValuesMetadata(Map<Matter,List<String>>)
+ boolean hasUsingContainerValuesMetadata()
}
class com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter {
- String name
- List<Material> candidate
- List<EnchantWrap> wrap
- int amount
- boolean mass
- Map<Integer,ContainerWrapper> container
+ String getName()
+ void setName(String)
+ List<Material> getCandidate()
+ void setCandidate(List<Material>)
+ void addCandidate(List<Material>)
+ List<EnchantWrap> getWrap()
+ void setWrap(List<EnchantWrap>)
+ boolean hasWrap()
+ void addWrap(EnchantWrap)
+ void addAllWrap(List<EnchantWrap>)
+ int getAmount()
+ void setAmount(int)
+ boolean isMass()
+ void setMass(boolean)
+ int getEnchantLevel(Enchantment)
+ String getAllWrapInfo()
+ boolean contains(Enchantment)
+ Matter copy()
+ Matter oneCopy()
+ boolean sameCandidate(Matter)
+ String info()
+ boolean hasContainer()
+ Map<Integer,ContainerWrapper> getContainerWrappers()
+ void setContainerWrappers(Map<Integer,ContainerWrapper>)
+ Map<Integer,ContainerWrapper> containerElementsDeepCopy()
+ boolean equals(Object)
+ int hashCode()
}


com.github.sakakiaruka.customcrafter.customcrafter.interfaces.Matters <|.. com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.Potions
com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter <|-- com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.Potions
com.github.sakakiaruka.customcrafter.customcrafter.interfaces.Matters <|.. com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter

com.github.sakakiaruka.customcrafter.customcrafter.object.Result.Result o- MetadataType
com.github.sakakiaruka.customcrafter.customcrafter.object.Result.Result *- ContainerWrapper

com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter *- EnchantWrap
com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter *- ContainerWrapper

com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.Potions o- PotionStrict
com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Potions.Potions o- PotionBottleType

com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe *- com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.Matter
com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe o- Tag
com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe *- Coordinate
com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe *- RecipePermission
com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe *- com.github.sakakiaruka.customcrafter.customcrafter.object.Result.Result
com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Recipe *- RecipeDataContainer

com.github.sakakiaruka.customcrafter.customcrafter.object.Recipe.Container.RecipeDataContainer *- RecipeDataContainerModifyType

com.github.sakakiaruka.customcrafter.customcrafter.object.Matter.EnchantWrap o- EnchantStrict

@enduml